FEATURES {
    STARTADDRESS: default = $0801;
}
SYMBOLS {
    __LOADADDR__:  type = import;
    __EXEHDR__:    type = import;
    __STACKSIZE__: type = weak, value = $0800; # 2k stack
    __HIMEM__:     type = weak, value = $8800;
    __SIDMEM__:    type = weak, value = $C000;

}
MEMORY {
    ZP:       file = "", define = yes, start = $0002,           size = $001A;
    LOADADDR: file = %O,               start = %S - 2,          size = $0002;
    HEADER:   file = %O, define = yes, start = %S,              size = $000D;
    MAIN:     file = %O, define = yes, start = __HEADER_LAST__, size = __HIMEM__ - __HEADER_LAST__, fill=yes;
    BSS:      file = "",               start = __ONCE_RUN__,    size = __HIMEM__ - __STACKSIZE__ - __ONCE_RUN__, fill=yes;
    HIRAM:    file = %O,               start = __HIMEM__,       size = $3800, fill = yes;
    SIDRAM:   file = %O,               start = __SIDMEM__,      size = $1000, fill = yes;

}
SEGMENTS {
    ZEROPAGE: load = ZP,       type = zp;
    LOADADDR: load = LOADADDR, type = ro;
    EXEHDR:   load = HEADER,   type = ro;
    STARTUP:  load = MAIN,     type = ro;
    CODE:     load = MAIN,     type = ro;    
    RODATA:   load = MAIN,     type = ro;
    DATA:     load = MAIN,     type = rw;
    INIT:     load = MAIN,     type = rw;
    ONCE:     load = MAIN,     type = ro,          define = yes;
    BSS:      load = BSS,      type = bss,         define = yes;    
    CHARSET:  load = HIRAM,    start = $8800,      define = yes, type = rw;
    SPRITES1: load = HIRAM,    start = $A000,      define = yes, type = rw;
    MUSIC1:   load = HIRAM,    start = $A200,      define = yes, type = rw;
    SPRITES2: load = HIRAM,    start = $AC80,      define = yes, type = rw;
    WOBBLECH: load = HIRAM,    start = $B080,      define = yes, type = rw;
    LEVELS:   load = HIRAM,    start = $B300,      define = yes, type = rw;
    MUSIC2:   load = SIDRAM,   start = $C000,      define = yes, type = rw;    
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
